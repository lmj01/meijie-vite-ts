function withStyles(e){return{...e,created(){e.created&&e.created.call(this),e.styles&&"function"==typeof e.styles&&("undefined"!=typeof window&&(window.__ficusjs__=window.__ficusjs__||{},window.__ficusjs__.styles=window.__ficusjs__.styles||{}),this._injectStyles(e.styles()))},_injectStyles(e){if("undefined"!=typeof window){if(window.__ficusjs__&&window.__ficusjs__.styles&&window.__ficusjs__.styles[this.componentTagName])return;if(Array.isArray(e)&&e.filter((e=>"string"!=typeof e)).length||!Array.isArray(e)&&"string"!=typeof e)return void console.error("Dude, styles must return a string or an array of strings!");let t="";Array.isArray(e)?Promise.all(e.map((e=>this._processStyle(e)))).then((e=>{t=e.filter((e=>e)).join("\n"),this._createAndInjectStylesheet(t,{"data-tag":this.componentTagName})})):this._processStyle(e).then((e=>this._createAndInjectStylesheet(e,{"data-tag":this.componentTagName})))}},_processStyle(e){if(/http[s]?:\/\/.+\.css$/.test(e)){const t=document.createElement("link");return t.rel="stylesheet",t.type="text/css",t.href=e,document.head.appendChild(t),Promise.resolve()}return/.+\.css$/.test(e)?window.fetch(e).then((e=>e.text())):Promise.resolve(e)},_createAndInjectStylesheet(e,t){const s=this._createStyle(e);this._setElementAttributes(s,t),document.head.appendChild(s),window.__ficusjs__.styles[this.componentTagName]={loaded:!0,style:s}},_createStyle(e){const t=document.createElement("style");return t.appendChild(document.createTextNode(e)),t},_setElementAttributes(e,t){t&&Object.keys(t).forEach((s=>{e.setAttribute(s,t[s])}))}}}export{withStyles};
